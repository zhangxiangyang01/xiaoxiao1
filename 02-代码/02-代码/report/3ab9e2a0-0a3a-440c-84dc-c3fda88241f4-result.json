{"name": "学院-查询-查询T002的数据", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <scripts.test_departments.TestDepartment object at 0x11f13b898>, case_id = 'query_001'\n\n    @pytest.mark.parametrize('case_id', get_case_id(\"query\", 5))\n    def test_case_query(self, case_id):\n        # 1. 获取Excel表格中的数据\n        em = base_excel.get_item_with_case_id(case_id)\n    \n        # 处理报告\n        allure.dynamic.title(em.module_name + \"-\" + em.title)\n    \n        # 2. 处理前置\n        self.deal_fixture(em)\n        # 3. 发送请求\n        res = requests.get(self.BASE_URL + em.url)\n        # 4. 断言\n>       assert_res(res, em)\n\nscripts/test_departments.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [200]>, em = <base.base_excel.ExcelModule object at 0x11f1b8e48>\n\n    def assert_res(res, em):\n    \n        # 如果这个断言是自己调用的，则不进行后续的断言操作\n        if os.getcwd() in traceback.extract_stack()[-3][0]:\n            return\n    \n        if em.expect_way == \"json\":\n>           assert res.json() == json.loads(em.expect_res)\nE           AssertionError\n\nbase/base_assert.py:12: AssertionError"}, "parameters": [{"name": "case_id", "value": "'query_001'"}], "start": 1576401936544, "stop": 1576401936910, "uuid": "90471539-1666-4347-8f8a-2964fc089ff9", "historyId": "1533109ab7adaffad1970d232b1d915c", "testCaseId": "be6659ba4d18de88d8a79b2f37eabb66", "fullName": "scripts.test_departments.TestDepartment#test_case_query", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test_departments"}, {"name": "subSuite", "value": "TestDepartment"}, {"name": "host", "value": "your-desired-host-name"}, {"name": "thread", "value": "31981-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test_departments"}]}